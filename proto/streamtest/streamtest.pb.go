// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamtest.proto

package streamtest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InMsg struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InMsg) Reset()         { *m = InMsg{} }
func (m *InMsg) String() string { return proto.CompactTextString(m) }
func (*InMsg) ProtoMessage()    {}
func (*InMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *InMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InMsg.Unmarshal(m, b)
}
func (m *InMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InMsg.Marshal(b, m, deterministic)
}
func (m *InMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InMsg.Merge(m, src)
}
func (m *InMsg) XXX_Size() int {
	return xxx_messageInfo_InMsg.Size(m)
}
func (m *InMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InMsg proto.InternalMessageInfo

func (m *InMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type OutMsg struct {
	Great                string   `protobuf:"bytes,2,opt,name=great,proto3" json:"great,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutMsg) Reset()         { *m = OutMsg{} }
func (m *OutMsg) String() string { return proto.CompactTextString(m) }
func (*OutMsg) ProtoMessage()    {}
func (*OutMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *OutMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutMsg.Unmarshal(m, b)
}
func (m *OutMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutMsg.Marshal(b, m, deterministic)
}
func (m *OutMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutMsg.Merge(m, src)
}
func (m *OutMsg) XXX_Size() int {
	return xxx_messageInfo_OutMsg.Size(m)
}
func (m *OutMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_OutMsg.DiscardUnknown(m)
}

var xxx_messageInfo_OutMsg proto.InternalMessageInfo

func (m *OutMsg) GetGreat() string {
	if m != nil {
		return m.Great
	}
	return ""
}

func init() {
	proto.RegisterType((*InMsg)(nil), "streamtest.InMsg")
	proto.RegisterType((*OutMsg)(nil), "streamtest.OutMsg")
}

func init() { proto.RegisterFile("streamtest.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x05, 0x89,
	0x28, 0x49, 0x73, 0xb1, 0x7a, 0xe6, 0xf9, 0x16, 0xa7, 0x0b, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6,
	0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x72, 0x5c, 0x6c, 0xfe, 0xa5,
	0x25, 0x20, 0x59, 0x11, 0x2e, 0xd6, 0xf4, 0xa2, 0xd4, 0xc4, 0x12, 0x09, 0x26, 0xb0, 0x34, 0x84,
	0x63, 0xd4, 0xcc, 0xc8, 0xc5, 0xea, 0x1e, 0x92, 0x5a, 0x5c, 0x22, 0x64, 0xc1, 0xc5, 0xed, 0x5a,
	0x91, 0x98, 0x5b, 0x90, 0x93, 0xea, 0x92, 0x9a, 0x98, 0x23, 0x24, 0xa8, 0x87, 0xb0, 0x42, 0x0f,
	0x6c, 0xbe, 0x94, 0x10, 0xb2, 0x10, 0xc4, 0x54, 0x25, 0x06, 0x03, 0x46, 0x21, 0x07, 0x2e, 0x41,
	0x24, 0x9d, 0xc1, 0x60, 0x35, 0x44, 0xeb, 0xd7, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03, 0xfb, 0xca,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x73, 0xde, 0x0e, 0x49, 0xe3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpctest package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GTestClient is the client API for GTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GTestClient interface {
	ExampleDeal(ctx context.Context, in *InMsg, opts ...grpc.CallOption) (GTest_ExampleDealClient, error)
	ExampleDealStream(ctx context.Context, opts ...grpc.CallOption) (GTest_ExampleDealStreamClient, error)
}

type gTestClient struct {
	cc *grpc.ClientConn
}

func NewGTestClient(cc *grpc.ClientConn) GTestClient {
	return &gTestClient{cc}
}

func (c *gTestClient) ExampleDeal(ctx context.Context, in *InMsg, opts ...grpc.CallOption) (GTest_ExampleDealClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GTest_serviceDesc.Streams[0], "/streamtest.GTest/ExampleDeal", opts...)
	if err != nil {
		return nil, err
	}
	x := &gTestExampleDealClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GTest_ExampleDealClient interface {
	Recv() (*OutMsg, error)
	grpc.ClientStream
}

type gTestExampleDealClient struct {
	grpc.ClientStream
}

func (x *gTestExampleDealClient) Recv() (*OutMsg, error) {
	m := new(OutMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gTestClient) ExampleDealStream(ctx context.Context, opts ...grpc.CallOption) (GTest_ExampleDealStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GTest_serviceDesc.Streams[1], "/streamtest.GTest/ExampleDealStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gTestExampleDealStreamClient{stream}
	return x, nil
}

type GTest_ExampleDealStreamClient interface {
	Send(*InMsg) error
	Recv() (*OutMsg, error)
	grpc.ClientStream
}

type gTestExampleDealStreamClient struct {
	grpc.ClientStream
}

func (x *gTestExampleDealStreamClient) Send(m *InMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gTestExampleDealStreamClient) Recv() (*OutMsg, error) {
	m := new(OutMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GTestServer is the server API for GTest service.
type GTestServer interface {
	ExampleDeal(*InMsg, GTest_ExampleDealServer) error
	ExampleDealStream(GTest_ExampleDealStreamServer) error
}

func RegisterGTestServer(s *grpc.Server, srv GTestServer) {
	s.RegisterService(&_GTest_serviceDesc, srv)
}

func _GTest_ExampleDeal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GTestServer).ExampleDeal(m, &gTestExampleDealServer{stream})
}

type GTest_ExampleDealServer interface {
	Send(*OutMsg) error
	grpc.ServerStream
}

type gTestExampleDealServer struct {
	grpc.ServerStream
}

func (x *gTestExampleDealServer) Send(m *OutMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GTest_ExampleDealStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GTestServer).ExampleDealStream(&gTestExampleDealStreamServer{stream})
}

type GTest_ExampleDealStreamServer interface {
	Send(*OutMsg) error
	Recv() (*InMsg, error)
	grpc.ServerStream
}

type gTestExampleDealStreamServer struct {
	grpc.ServerStream
}

func (x *gTestExampleDealStreamServer) Send(m *OutMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gTestExampleDealStreamServer) Recv() (*InMsg, error) {
	m := new(InMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamtest.GTest",
	HandlerType: (*GTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExampleDeal",
			Handler:       _GTest_ExampleDeal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExampleDealStream",
			Handler:       _GTest_ExampleDealStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamtest.proto",
}
